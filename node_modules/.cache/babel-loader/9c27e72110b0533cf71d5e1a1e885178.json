{"ast":null,"code":"// // This optional code is used to register a service worker.\n// // register() is not called by default.\n// // This lets the app load faster on subsequent visits in production, and gives\n// // it offline capabilities. However, it also means that developers (and users)\n// // will only see deployed updates on subsequent visits to a page, after all the\n// // existing tabs open on the page have been closed, since previously cached\n// // resources are updated in the background.\n// // To learn more about the benefits of this model and instructions on how to\n// // opt-in, read https://bit.ly/CRA-PWA\n// const isLocalhost = Boolean(\n// \twindow.location.hostname === 'localhost' ||\n// \t\t// [::1] is the IPv6 localhost address.\n// \t\twindow.location.hostname === '[::1]' ||\n// \t\t// 127.0.0.0/8 are considered localhost for IPv4.\n// \t\twindow.location.hostname.match(\n// \t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n// \t\t)\n// );\n// export function register(config) {\n// \tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n// \t\t// The URL constructor is available in all browsers that support SW.\n// \t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n// \t\tif (publicUrl.origin !== window.location.origin) {\n// \t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n// \t\t\t// from what our page is served on. This might happen if a CDN is used to\n// \t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n// \t\t\treturn;\n// \t\t}\n// \t\twindow.addEventListener('load', () => {\n// \t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n// \t\t\tif (isLocalhost) {\n// \t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n// \t\t\t\tcheckValidServiceWorker(swUrl, config);\n// \t\t\t\t// Add some additional logging to localhost, pointing developers to the\n// \t\t\t\t// service worker/PWA documentation.\n// \t\t\t\tnavigator.serviceWorker.ready.then(() => {\n// \t\t\t\t\tconsole.log(\n// \t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n// \t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n// \t\t\t\t\t);\n// \t\t\t\t});\n// \t\t\t} else {\n// \t\t\t\t// Is not localhost. Just register service worker\n// \t\t\t\tregisterValidSW(swUrl, config);\n// \t\t\t}\n// \t\t});\n// \t}\n// }\n// function registerValidSW(swUrl, config) {\n// \tnavigator.serviceWorker\n// \t\t.register(swUrl)\n// \t\t.then((registration) => {\n// \t\t\tregistration.onupdatefound = () => {\n// \t\t\t\tconst installingWorker = registration.installing;\n// \t\t\t\tif (installingWorker == null) {\n// \t\t\t\t\treturn;\n// \t\t\t\t}\n// \t\t\t\tinstallingWorker.onstatechange = () => {\n// \t\t\t\t\tif (installingWorker.state === 'installed') {\n// \t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n// \t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n// \t\t\t\t\t\t\t// but the previous service worker will still serve the older\n// \t\t\t\t\t\t\t// content until all client tabs are closed.\n// \t\t\t\t\t\t\tconsole.log(\n// \t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n// \t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n// \t\t\t\t\t\t\t);\n// \t\t\t\t\t\t\t// Execute callback\n// \t\t\t\t\t\t\tif (config && config.onUpdate) {\n// \t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t} else {\n// \t\t\t\t\t\t\t// At this point, everything has been precached.\n// \t\t\t\t\t\t\t// It's the perfect time to display a\n// \t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n// \t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n// \t\t\t\t\t\t\t// Execute callback\n// \t\t\t\t\t\t\tif (config && config.onSuccess) {\n// \t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t}\n// \t\t\t\t\t}\n// \t\t\t\t};\n// \t\t\t};\n// \t\t})\n// \t\t.catch((error) => {\n// \t\t\tconsole.error('Error during service worker registration:', error);\n// \t\t});\n// }\n// function checkValidServiceWorker(swUrl, config) {\n// \t// Check if the service worker can be found. If it can't reload the page.\n// \tfetch(swUrl, {\n// \t\theaders: { 'Service-Worker': 'script' },\n// \t})\n// \t\t.then((response) => {\n// \t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n// \t\t\tconst contentType = response.headers.get('content-type');\n// \t\t\tif (\n// \t\t\t\tresponse.status === 404 ||\n// \t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n// \t\t\t) {\n// \t\t\t\t// No service worker found. Probably a different app. Reload the page.\n// \t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n// \t\t\t\t\tregistration.unregister().then(() => {\n// \t\t\t\t\t\twindow.location.reload();\n// \t\t\t\t\t});\n// \t\t\t\t});\n// \t\t\t} else {\n// \t\t\t\t// Service worker found. Proceed as normal.\n// \t\t\t\tregisterValidSW(swUrl, config);\n// \t\t\t}\n// \t\t})\n// \t\t.catch(() => {\n// \t\t\tconsole.log(\n// \t\t\t\t'No internet connection found. App is running in offline mode.'\n// \t\t\t);\n// \t\t});\n// }\n// export function unregister() {\n// \tif ('serviceWorker' in navigator) {\n// \t\tnavigator.serviceWorker.ready\n// \t\t\t.then((registration) => {\n// \t\t\t\tregistration.unregister();\n// \t\t\t})\n// \t\t\t.catch((error) => {\n// \t\t\t\tconsole.error(error.message);\n// \t\t\t});\n// \t}\n// }","map":{"version":3,"names":[],"sources":["C:/Users/84372/Desktop/TL viec lam/FullStackDeveloper/Mon3-moi/Assignment 02/src/serviceWorker.js"],"sourcesContent":["// // This optional code is used to register a service worker.\n// // register() is not called by default.\n\n// // This lets the app load faster on subsequent visits in production, and gives\n// // it offline capabilities. However, it also means that developers (and users)\n// // will only see deployed updates on subsequent visits to a page, after all the\n// // existing tabs open on the page have been closed, since previously cached\n// // resources are updated in the background.\n\n// // To learn more about the benefits of this model and instructions on how to\n// // opt-in, read https://bit.ly/CRA-PWA\n\n// const isLocalhost = Boolean(\n// \twindow.location.hostname === 'localhost' ||\n// \t\t// [::1] is the IPv6 localhost address.\n// \t\twindow.location.hostname === '[::1]' ||\n// \t\t// 127.0.0.0/8 are considered localhost for IPv4.\n// \t\twindow.location.hostname.match(\n// \t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n// \t\t)\n// );\n\n// export function register(config) {\n// \tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n// \t\t// The URL constructor is available in all browsers that support SW.\n// \t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n// \t\tif (publicUrl.origin !== window.location.origin) {\n// \t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n// \t\t\t// from what our page is served on. This might happen if a CDN is used to\n// \t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n// \t\t\treturn;\n// \t\t}\n\n// \t\twindow.addEventListener('load', () => {\n// \t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n// \t\t\tif (isLocalhost) {\n// \t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n// \t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n// \t\t\t\t// Add some additional logging to localhost, pointing developers to the\n// \t\t\t\t// service worker/PWA documentation.\n// \t\t\t\tnavigator.serviceWorker.ready.then(() => {\n// \t\t\t\t\tconsole.log(\n// \t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n// \t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n// \t\t\t\t\t);\n// \t\t\t\t});\n// \t\t\t} else {\n// \t\t\t\t// Is not localhost. Just register service worker\n// \t\t\t\tregisterValidSW(swUrl, config);\n// \t\t\t}\n// \t\t});\n// \t}\n// }\n\n// function registerValidSW(swUrl, config) {\n// \tnavigator.serviceWorker\n// \t\t.register(swUrl)\n// \t\t.then((registration) => {\n// \t\t\tregistration.onupdatefound = () => {\n// \t\t\t\tconst installingWorker = registration.installing;\n// \t\t\t\tif (installingWorker == null) {\n// \t\t\t\t\treturn;\n// \t\t\t\t}\n// \t\t\t\tinstallingWorker.onstatechange = () => {\n// \t\t\t\t\tif (installingWorker.state === 'installed') {\n// \t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n// \t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n// \t\t\t\t\t\t\t// but the previous service worker will still serve the older\n// \t\t\t\t\t\t\t// content until all client tabs are closed.\n// \t\t\t\t\t\t\tconsole.log(\n// \t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n// \t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n// \t\t\t\t\t\t\t);\n\n// \t\t\t\t\t\t\t// Execute callback\n// \t\t\t\t\t\t\tif (config && config.onUpdate) {\n// \t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t} else {\n// \t\t\t\t\t\t\t// At this point, everything has been precached.\n// \t\t\t\t\t\t\t// It's the perfect time to display a\n// \t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n// \t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n// \t\t\t\t\t\t\t// Execute callback\n// \t\t\t\t\t\t\tif (config && config.onSuccess) {\n// \t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t}\n// \t\t\t\t\t}\n// \t\t\t\t};\n// \t\t\t};\n// \t\t})\n// \t\t.catch((error) => {\n// \t\t\tconsole.error('Error during service worker registration:', error);\n// \t\t});\n// }\n\n// function checkValidServiceWorker(swUrl, config) {\n// \t// Check if the service worker can be found. If it can't reload the page.\n// \tfetch(swUrl, {\n// \t\theaders: { 'Service-Worker': 'script' },\n// \t})\n// \t\t.then((response) => {\n// \t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n// \t\t\tconst contentType = response.headers.get('content-type');\n// \t\t\tif (\n// \t\t\t\tresponse.status === 404 ||\n// \t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n// \t\t\t) {\n// \t\t\t\t// No service worker found. Probably a different app. Reload the page.\n// \t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n// \t\t\t\t\tregistration.unregister().then(() => {\n// \t\t\t\t\t\twindow.location.reload();\n// \t\t\t\t\t});\n// \t\t\t\t});\n// \t\t\t} else {\n// \t\t\t\t// Service worker found. Proceed as normal.\n// \t\t\t\tregisterValidSW(swUrl, config);\n// \t\t\t}\n// \t\t})\n// \t\t.catch(() => {\n// \t\t\tconsole.log(\n// \t\t\t\t'No internet connection found. App is running in offline mode.'\n// \t\t\t);\n// \t\t});\n// }\n\n// export function unregister() {\n// \tif ('serviceWorker' in navigator) {\n// \t\tnavigator.serviceWorker.ready\n// \t\t\t.then((registration) => {\n// \t\t\t\tregistration.unregister();\n// \t\t\t})\n// \t\t\t.catch((error) => {\n// \t\t\t\tconsole.error(error.message);\n// \t\t\t});\n// \t}\n// }\n"],"mappings},"metadata":{},"sourceType":"module"}